using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace OS_Assignment_1
{
    public partial class Form1 : Form
    {
        

        ArrayList process_name = new ArrayList();
        ArrayList Burst_time = new ArrayList();
        ArrayList Arrival_time = new ArrayList();
        ArrayList Priority_Number = new ArrayList();

        ArrayList Labels = new ArrayList();

        Dictionary<object, object> NamArriv = new Dictionary<object, object>();
        Dictionary<object, object> NamBurst = new Dictionary<object, object>();
        Dictionary<object, object> Nampriority = new Dictionary<object, object>();

        int q_interval;


        int Process;
        string num;

        public Form1()
        {
            InitializeComponent();
            Prog_show();
        }
        public void Prog_show() 
        {
            textBox1.Enabled = false;
            textBox5.Enabled = false;
            textBox2.Enabled = false;
            textBox3.Enabled = false;
            textBox4.Enabled = false;
            textBox6.Enabled = false;
            button2.Enabled = false;
            button3.Enabled = false;
            
        }
        
        private int lastCheck = -1;
        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            int toUncheck = lastCheck;
            if (toUncheck != -1)
                checkedListBox1.SetItemChecked(toUncheck, false);
            lastCheck = checkedListBox1.SelectedIndex;
            checkedListBox1.SetItemChecked(lastCheck, true);

            switch (checkedListBox1.Text)
            {     
                              
                case "FCFS" :
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = true;
                    textBox3.Enabled = false;
                    textBox4.Enabled = true;
                    textBox6.Enabled = false;
                    button2.Enabled = true;
                    break;
                case "SJF (Preemptive)":
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = true;
                    textBox3.Enabled = false;
                    textBox4.Enabled = true;
                    textBox6.Enabled = false;
                    button2.Enabled = true;
                    break;
                case "SJF (non-Preemptive)":
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = true;
                    textBox3.Enabled = false;
                    textBox4.Enabled = true;
                    textBox6.Enabled = false;
                    button2.Enabled = true;
                    break;
                case "Priority (Preemptive)":
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = false;
                    textBox3.Enabled = true;
                    textBox4.Enabled = true;
                    textBox6.Enabled = false;
                    button2.Enabled = true;
                    break;
                case "Priority (non-Preemptive)":
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = false;
                    textBox3.Enabled = true;
                    textBox4.Enabled = true;
                    textBox6.Enabled = false;
                    button2.Enabled = true;
                    break;
                case "Round Robin (RR)":
                    textBox1.Enabled = true;
                    textBox5.Enabled = true;
                    textBox2.Enabled = false;
                    textBox3.Enabled = false;
                    textBox4.Enabled = true;
                    textBox6.Enabled = true;
                    button2.Enabled = true;
                    break;
            }

        }
        int i=0, j=0, k=0, l=0, m=0, n=0;
       
        private void button2_Click(object sender, EventArgs e)
        {
            Process = int.Parse(textBox1.Text);
            button3.Enabled = true;
            switch (checkedListBox1.Text)
            {
                case "FCFS":

                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        Arrival_time.Add(textBox2.Text);
                        NamArriv.Add(process_name[i], Arrival_time[i]);
                        NamBurst.Add(process_name[i], Burst_time[i]);
                        i++;
                    break;
                    }while(i < Process);
                    break;
                case "SJF (Preemptive)":
                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        Arrival_time.Add(textBox2.Text);
                        NamArriv.Add(process_name[j], Arrival_time[j]);
                        NamBurst.Add(process_name[j], Burst_time[j]);
                        j++;
                        break;
                        }while(j < Process);
                    break;
                case "SJF (non-Preemptive)":
                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        Arrival_time.Add(textBox2.Text);
                        NamArriv.Add(process_name[k], Arrival_time[k]);
                        NamBurst.Add(process_name[k], Burst_time[k]);
                        k++;
                        break;
                    } while (k < Process);
                    break;
                case "Priority (Preemptive)":
                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        Priority_Number.Add(textBox3.Text);
                        NamBurst.Add(process_name[l], Burst_time[l]);
                        Nampriority.Add(process_name[l], Priority_Number[l]);
                        l++;
                        break;
                    } while (l < Process);
                    break;
                case "Priority (non-Preemptive)":
                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        Priority_Number.Add(textBox3.Text);
                        NamBurst.Add(process_name[m], Burst_time[m]);
                        Nampriority.Add(process_name[m], Priority_Number[m]);
                        m++;
                        break;
                    } while (m < Process);
                    break;
                case "Round Robin (RR)":
                    do {
                        process_name.Add(textBox5.Text);
                        Burst_time.Add(textBox4.Text);
                        q_interval = int.Parse(textBox6.Text);
                        NamBurst.Add(process_name[n], Burst_time[n]);
                        n++;
                        break;
                    } while (n < Process);
                    break;
            }
        }
        Stack Arrive = new Stack();
       // Stack prior = new Stack();
        private void button3_Click(object sender, EventArgs e)
        {
            
            Arrival_time.Sort();
            Arrival_time.Reverse();
            Priority_Number.Sort();
            
            
            switch (checkedListBox1.Text)
            {

                case "FCFS":
                    
                    break;
                case "SJF (Preemptive)":
                    
                    break;
                case "SJF (non-Preemptive)":
                    
                    break;
                case "Priority (Preemptive)":
                    
                    break;
                case "Priority (non-Preemptive)":
                    
                    break;
                case "Round Robin (RR)":
                    
                    break;
            }
        }
        public void fcfs() 
        {
            int temp = 0;
            for (int b = 0; b < Process; b++)
            {
                Arrive.Push(Arrival_time[b]);
            }
            do
            {
                var myKey = NamArriv.FirstOrDefault(x => x.Value == Arrive.Pop()).Key;
                NamArriv.Remove(myKey);

                label8.Text = myKey.ToString();
                temp++;
            } while (temp < Process);


            //
            
        }
        
       
        
    }
}


//var myKey = types.FirstOrDefault(x => x.Value == "one").Key;
/*for (int b = 0; b < Process; b++)
            {
                prior.Push(Priority_Number[b]);
            }*/